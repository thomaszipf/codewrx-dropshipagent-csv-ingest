version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: csv-ingest-db-prod
    environment:
      POSTGRES_DB: csv_ingestion
      POSTGRES_USER: csvuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-csvpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csvuser -d csv_ingestion"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: csv-ingest-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://csvuser:${POSTGRES_PASSWORD:-csvpassword}@postgres:5432/csv_ingestion
      JWT_SECRET: ${JWT_SECRET:-change-in-production}
      BCRYPT_ROUNDS: 12
      FTP_PATH: /app/ftp
      HOST: 0.0.0.0
      PORT: 3000
    volumes:
      - ./exports:/app/ftp:ro
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: csv-ingest-nginx-prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - internal
    depends_on:
      - backend
    restart: unless-stopped
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    container_name: csv-ingest-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/logs:/var/log/letsencrypt:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  internal:
    driver: bridge